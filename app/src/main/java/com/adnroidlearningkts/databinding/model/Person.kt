package com.adnroidlearningkts.databinding.model

import androidx.databinding.BaseObservable
import androidx.databinding.Bindable
import com.adnroidlearningkts.BR

/**
 * 2 way data binding: extends BaseObservable
 *
 * BaseObservable: not strictly required, but useful to implement automatic property change notifications,
 * especially when using @Bindable annotation and customer getters/setters for properties in your
 * ViewModel or data source
 *  -> it provide the notify property change method which allow you to notify the data binding library when
 *  a property has changed
 *  -> essential for the library to automatically update UI elements the underlying data changes
 */
//data class Person(val name: String, val email: String)

//class Person: BaseObservable() {
//
//    var name: String = ""

//data class Person(val name: String, private var _email: String) : BaseObservable() {
//
//    var email: String
//        @Bindable get() = _email
//        set(value) {
//            _email = value
//            notifyPropertyChanged(BR.email)
//        }
//}

data class Person(val name: String) : BaseObservable() {


    /**
     * when see error -> To use data binding annotations in Kotlin, apply the 'kotlin-kapt' plugin in your module's build. gradle
     *
     * option1: @get:Bindable
     * option2: add plugin in build.gradle.kts(Module:app) -> `plugins` section -> id("kotlin-kapt")
     *
     * @Bindable: used to mark properties for which the Data Binding library should generate code
     * to handle change notification.
     * It triggers automatic updates in the UI that is bound to the property
     *
     * add custom setter -> to notifyPropertyChanged
     * BR class is auto generated by Data Binding library, which contains identifiers for all
     * properties
     */
    @Bindable
    var email: String = ""
        set(value) {
            field = value
            notifyPropertyChanged(BR.email)
        }
}